Add SocketAddress to Connect() and SendTo().

Double check return codes in Socket.c.
    There should be no references to SOCKET_SYSTEM_LAYER.
    What should the default value for return_code be?

Verify zero-length UDP messages.

Does the message length for send include the null terminator?

Create a UDP broadcast demo.
    This may require implementing recvfrom() and sendto().

Add functions to get the source vs the destination IP address and port.
    TCP Clients should return a NULL source address and port?
    TCP Clients should return a valid destination if they have been connected.
    TCP Servers should return a valid source if they have been bound.
    TCP Servers should return a NULL if they have been not bound.
    UDP Clients should return a NULL source address. Port?
    etc. Figure this out.

Consider forcing the user to use the API properly:
    Connect is for Clients, Bind is for Servers, etc.
        This would require opening a socket as a cliet or a server.
        There are a variety of ways to do this, some of which are quite hairy. Leave this for later.
    Accept is only for TCP, not UDP.
    Connect can be used for UDP; read the docs.
    Listen is for TCP, not UDP.

Rethink and recompare new tests to old.
    Should we close the socket after tests?

Refactor setting Open() expectations. Create helper methods to:
    Set TCP socket.
    Set UDP socket.

Come up with a different way to parse program options:
    Getopt (try this first?).
    Argp
These are both GNU C library modules.

Does Connect() block at the system level? Update documentation accordingly.

Clean up socket system layer:
    Finish documentation.
    Clear stored socket settings?
        domain
    Store other SocketSettings?
        type
        protocol
    Extract converting address and port ( inet_addr(), htons() ).

Allow flags in Send().
Allow flags in Receive().

Make a distclean option. Remove build, obj, all build directories.

Figure out why moving Server to ./ would prevent Server from being build.

Why is NULL public in Socket.h?

Handle signals in products. Ctrl+C, etc.

If we send a message in a buffer with 10 characters and 1990 nulls, how much data is sent over the network?
